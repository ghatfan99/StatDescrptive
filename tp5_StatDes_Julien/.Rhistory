M2<- (I-((1/3)*N))
M2
M<-matrix(c(rep(1,16)),nrow=4,ncol=4) I4=diag(1,4) i=cI4-M solve (i)%*%i i1=I4-(1/(4-1))M i1
M<-matrix(c(rep(1,16)),nrow=4,ncol=4)
I4=diag(1,4)
i=cI4-M
solve (i)%*%i
i1=I4-(1/(4-1))*M
i1
A<-matrix(c(2,0,0,1,2,1,-1,0,1),nrow=3, byrow=T)
A
# TP3 statistiques descriptives de Julien
# Quand la distance de Khi2 > q0.95 (table de khi2), on conclut
# que les variables sont dépandantes et selon le problème
# posé on continue (la situation maritale influence l'accepation
# ou le refus d'un dossier pour un crédit)
###### Les coefficeints C et phi ######
# C = sqrt(Dkhi2 / Dkhi2 + n) il es entre 0 et 1
# phi = sqrt(Dkhi2 / n)
# plus il sont proches de 0 plus il y a un indépendance
# entre les deux varaibles
#######################################
## Le coefficient V de Cram ́er n ́ecessite l’utilisation de la statistique du χ
# V = sqrt(Dkhi2 / n × min{l − 1; c − 1})
# o`u n est l’effectif total de la population, c est le nombre de colonnes (nombre de modalit ́es de Y )
# et l le nombre de lignes (modalits de X).
#### interprétation ####
# Valeur du V de Cram ́er Intensite de la relation entre les variables
# inférieur à 0,10 relation nulle ou très faible
# entre       0,10 et 0,20 relation faible
# entre       0,20 et 0,30 relation moyenne
# au dessus de 0,30 relation forte
##################### TP ################
### 3.1
# i, deux f çons de faire
poidstaille=cbind(c(830,862),c(8615,11183),c(30784,2756),c(4839,2348)) # columns concate
poidstaille=rbind(c(830,8615,30784,4839),c(862,11183,27566,2348)) # rows bind
# ii, donner des noms aux lignes
rownames(poidstaille)=c("Garçons","filles")
# iii, on ajoute les modalités pour les colonnes
colnames(poidstaille)=c("Faible","Moyen","Elevé","Tr.élv")
### 3.2
# i, somme totale des effectifs
sum(poidstaille)
# ii, le tableau des fréquences
frequences = poidstaille/sum(poidstaille)
# la table des fréquences, on peut l'obtenir avec la commande
prop.table(poidstaille)
### 3.3
# i, La distribution de Y pour les garçons
poidstaille[1,]
poidstaille[1,]/sum(poidstaille[1,]) #fréquences par rapport à l'effectif de garçons
# ii, La distribution de Y pour les filles
poidstaille[2,]
poidstaille[2,]/sum(poidstaille[2,]) #fréquences par rapport à l'effectif de filles
# iii, tracer diagramme en batons
barplot(poidstaille,main = 'Garçon, Filles', xlab = "nombre",
legend=row.names(poidstaille), beside = TRUE, col=c("darkblue", "red"))
### 3.4
# i, les marges
frequences = addmargins(frequences)
# ii, La serie de frequences garcons et de filles
frequences[,5]
# iii, distribution marginale de Y
frequences[3,]
### 3.5 V de Cramer
# statistique de khi2
chisq.test(poidstaille)
# fonction de Cramer
cramer = function(table) {
test = chisq.test(table)
chi2 = as.numeric(test$statistic)
n = sum(table)
c = length(table[1, ])
r = length(table[, 1])
m = min(c, r)
V = sqrt(chi2 / n * (m - 1))
return(V)
}
# application sur notre exemple
cramer(poidstaille)
# TP3 statistiques descriptives de Julien
# Quand la distance de Khi2 > q0.95 (table de khi2), on conclut
# que les variables sont dépandantes et selon le problème
# posé on continue (la situation maritale influence l'accepation
# ou le refus d'un dossier pour un crédit)
###### Les coefficeints C et phi ######
# C = sqrt(Dkhi2 / Dkhi2 + n) il es entre 0 et 1
# phi = sqrt(Dkhi2 / n)
# plus il sont proches de 0 plus il y a un indépendance
# entre les deux varaibles
#######################################
## Le coefficient V de Cram ́er n ́ecessite l’utilisation de la statistique du χ
# V = sqrt(Dkhi2 / n × min{l − 1; c − 1})
# o`u n est l’effectif total de la population, c est le nombre de colonnes (nombre de modalit ́es de Y )
# et l le nombre de lignes (modalits de X).
#### interprétation ####
# Valeur du V de Cram ́er Intensite de la relation entre les variables
# inférieur à 0,10 relation nulle ou très faible
# entre       0,10 et 0,20 relation faible
# entre       0,20 et 0,30 relation moyenne
# au dessus de 0,30 relation forte
##################### TP ################
### 3.1
# i, deux f çons de faire
poidstaille=cbind(c(830,862),c(8615,11183),c(30784,2756),c(4839,2348)) # columns concate
poidstaille=rbind(c(830,8615,30784,4839),c(862,11183,27566,2348)) # rows bind
# ii, donner des noms aux lignes
rownames(poidstaille)=c("Garçons","filles")
# iii, on ajoute les modalités pour les colonnes
colnames(poidstaille)=c("Faible","Moyen","Elevé","Tr.élv")
### 3.2
# i, somme totale des effectifs
sum(poidstaille)
# ii, le tableau des fréquences
frequences = poidstaille/sum(poidstaille)
# la table des fréquences, on peut l'obtenir avec la commande
prop.table(poidstaille)
### 3.3
# i, La distribution de Y pour les garçons
poidstaille[1,]
poidstaille[1,]/sum(poidstaille[1,]) #fréquences par rapport à l'effectif de garçons
# ii, La distribution de Y pour les filles
poidstaille[2,]
poidstaille[2,]/sum(poidstaille[2,]) #fréquences par rapport à l'effectif de filles
# iii, tracer diagramme en batons
barplot(poidstaille,main = 'Garçon, Filles', xlab = "nombre",
legend=row.names(poidstaille), beside = TRUE, col=c("darkblue", "red"))
### 3.4
# i, les marges
frequences = addmargins(frequences)
# ii, La serie de frequences garcons et de filles
frequences[,5]
# iii, distribution marginale de Y
frequences[3,]
### 3.5 V de Cramer
# statistique de khi2
chisq.test(poidstaille)
# fonction de Cramer
cramer = function(table) {
test = chisq.test(table)
chi2 = as.numeric(test$statistic)
n = sum(table)
c = length(table[1, ])
r = length(table[, 1])
m = min(c, r)
V = sqrt(chi2 / n * (m - 1))
return(V)
}
# application sur notre exemple
cramer(poidstaille)
termN = function(lambda, n){
resultat = sum(lambda^(0:n)/factorial(0:n))
return (resultat)
}
termN(3, 1)
termN(3, 0)
coeff = function(n,k){
res = (factorial(n)/(factorial(k)*factorial(n-k))
return(res)
}
coeff = function(n,k){
res = factorial(n)/(factorial(k)*factorial(n-k))
return(res)
}
# TP3 statistiques descriptives de Julien
# Quand la distance de Khi2 > q0.95 (table de khi2), on conclut
# que les variables sont dépandantes et selon le problème
# posé on continue (la situation maritale influence l'accepation
# ou le refus d'un dossier pour un crédit)
###### Les coefficeints C et phi ######
# C = sqrt(Dkhi2 / Dkhi2 + n) il es entre 0 et 1
# phi = sqrt(Dkhi2 / n)
# plus il sont proches de 0 plus il y a un indépendance
# entre les deux varaibles
#######################################
## Le coefficient V de Cram ́er n ́ecessite l’utilisation de la statistique du χ
# V = sqrt(Dkhi2 / n × min{l − 1; c − 1})
# o`u n est l’effectif total de la population, c est le nombre de colonnes (nombre de modalit ́es de Y )
# et l le nombre de lignes (modalits de X).
#### interprétation ####
# Valeur du V de Cram ́er Intensite de la relation entre les variables
# inférieur à 0,10 relation nulle ou très faible
# entre       0,10 et 0,20 relation faible
# entre       0,20 et 0,30 relation moyenne
# au dessus de 0,30 relation forte
##################### TP ################
### 3.1
# i, deux f çons de faire
poidstaille=cbind(c(830,862),c(8615,11183),c(30784,2756),c(4839,2348)) # columns concate
poidstaille=rbind(c(830,8615,30784,4839),c(862,11183,27566,2348)) # rows bind
# ii, donner des noms aux lignes
rownames(poidstaille)=c("Garçons","filles")
# iii, on ajoute les modalités pour les colonnes
colnames(poidstaille)=c("Faible","Moyen","Elevé","Tr.élv")
### 3.2
# i, somme totale des effectifs
sum(poidstaille)
# ii, le tableau des fréquences
frequences = poidstaille/sum(poidstaille)
# la table des fréquences, on peut l'obtenir avec la commande
prop.table(poidstaille)
### 3.3
# i, La distribution de Y pour les garçons
poidstaille[1,]
poidstaille[1,]/sum(poidstaille[1,]) #fréquences par rapport à l'effectif de garçons
# ii, La distribution de Y pour les filles
poidstaille[2,]
poidstaille[2,]/sum(poidstaille[2,]) #fréquences par rapport à l'effectif de filles
# iii, tracer diagramme en batons
barplot(poidstaille,main = 'Garçon, Filles', xlab = "nombre",
legend=row.names(poidstaille), beside = TRUE, col=c("darkblue", "red"))
### 3.4
# i, les marges
frequences = addmargins(frequences)
# ii, La serie de frequences garcons et de filles
frequences[,5]
# iii, distribution marginale de Y
frequences[3,]
### 3.5 V de Cramer
# statistique de khi2
chisq.test(poidstaille)
# fonction de Cramer
cramer = function(table) {
test = chisq.test(table)
chi2 = as.numeric(test$statistic)
n = sum(table)
c = length(table[1, ])
r = length(table[, 1])
m = min(c, r)
V = sqrt(chi2 / n * (m - 1))
return(V)
}
# application sur notre exemple
cramer(poidstaille)
barplot(poidstaille,main = 'Garçon, Filles', xlab = "nombre",
legend=row.names(poidstaille), beside = TRUE, col=c("darkblue", "red"), ylim=c(0, 35000))
x= matrix(1, nrow = 4, ncol = 4)
x
x= matrix(, nrow = 4, ncol = 4)
x
rm(x)
mat_sym=function(m){
A=matrix(0,m,m)
for(i in 1:m){
for(j in 1:m){
if(i <= j){
A[i,j]=sample(c(1,-1,0),1)
A[j,i]=A[i,j]
}
}
}
return(A)
}
m=600
n=300
M=mat_sym(m)
system.time(diag_puissance(M,n))
View(mat_sym)
binomFunction <- function(n, k){
return(factorial(n)/factorial(k)*factorial(n-k))
}
# test calcule de factoriel 20, 8
binomFunction(20,8)
binomFunction <- function(n, k){
return(factorial(n)/factorial(k)*factorial(n-k))
}
# test calcule de factoriel 20, 8
binomFunction(20,8)
coefb=function(n,k){
factorial(n)/(factorial(k)*factorial(n-k))
}
coefb(20,8)
choose(20,8)
binomFunction <- function(n, k){
return(factorial(n)/(factorial(k)*factorial(n-k)))
}
# test calcule de factoriel 20, 8
binomFunction(20,8)
choose(20, 8)
k=0:6
sum(choose(6,k)) #=64
2^6 #=64 donc même résultat
k=0:10
sum(choose(10,k)*0,4^k*0,6^(10-k))
k=0:10
sum(choose(10,k)*0.4^k*0.6^(10-k))
0,6
k=0:10
sum(choose(10,k)*0,4^k*0,6^(10-k))
sum((choose(10,(0:10)))*(0.4^(0:10))*(0.6^(10-(0:10))))
sum((choose(4,(0:4)))*(0.8^(0:4))*(1.2^(4-(0:4))))
k=0:10
sum(choose(10,k)*0,4^k*0,6^(10-k))
k=0:10
sum(choose(10,k)*0.4^k*0.6^(10-k))
termN = function(lambda, n){
resultat = sum(lambda^(0:n)/factorial(0:n))
return (resultat)
}
x = termN(3, 0:100)
x = 0:100
apply(x, 1, termN)
## 3.1
res = -.5^(1:20) + 2
res
## 3.1
res = -.5^(0:19) + 2
coefbinom = function(k, n){
result = factorial(n)/ (factorial(k)*(factorial(n-k)))
return(result)
}
coefbinom(4, 10)
coefbinom = function(k, n){
result = factorial(n)/ (factorial(k)*(factorial(n-k)))
return(result)
}
coefbinom(20,8)
coefbinom = function(k, n){
result = factorial(n)/ (factorial(k)*(factorial(n-k)))
return(result)
}
coefbinom(8,20)
coefbinom = function(k, n){
result = factorial(n)/ factorial(k)*(factorial(n-k))
return(result)
}
#b
coefbinom(8, 20)
# test
coefbinom = function(k, n){
result = factorial(n)/ (factorial(k)*factorial(n-k))
return(result)
}
#b
coefbinom(8, 20)
#c
choose(20, 8)
fibonnaci = function(n) {
vecfibo=NULL
i=0
resu=1
mem=1
mem2=0
while (i<n-2){
resu = mem + mem2
mem2=mem mem=resu
vecfibo=c(mem,mem2,vecfibo,fibonnaci(i))
i=i+1 }
return(vecfibo)
}
sum(coefbinom(0, 10)*( 0.4^(0:10) * 0.6^10−(0:10)))
sum(coefbinom((0:10), 10)*( 0.4^(0:10) * 0.6^10−(0:10)))
sum(coefbinom(k, 10)*( 0.4^k * 0.6^10−k))
k=0:10
sum(coefbinom(k, 10)*( 0.4^k * 0.6^10−k))
sum(coefbinom(k, 10)*( 0.4^k * 0.6^(10−k))
sum(coefbinom(k, 10)*( 0.4^k * 0.6^(10−k)) )
sum(coefbinom(k, 10)*( 0.4^k * 0.6^(10-k)) )
l = matrix(nrow=5, ncol=5)
l
matricecarree<-function(n){
t<-matrix(nrow=n,ncol=n)
for(i in 1:n){
for(j in 1:n){
if(i<=j) t[i,j]=(-1)^(i+j)
else t[i,j]=0
}
}
return(t)
}
matricecarree(8)
Matrice=function(n){
T=matrix(nrow=n, ncol=n)
for(i in 1:n){
for (j in 1:n){
if (i<=j) T[i,j]=(-1)^(i+j)
else T[i,j]=0
}
}
return(T)
}
Matrice(8)
g= matrix(0, nrow=3, ncol=3)
all(g==0)
g[2,3]=2
all(g==0)
nilpotenteOrdreT = function(T){
if(all(T==0)){
return(1)
}else{
k=1
matrice = T
while(all(matrice==0)!=TRUE){
matrice = matrice%*%T
k=k+1
}
}
return(k)
}
# test
A <- matrix(c(3,9,-9, 2, 0, 0, 3, 3, -3), nrow=3, byrow = TRUE)
B <- matrix(c(0, 1, 1, 1, 0, 0, 2, 1, 0, 0,0, 3, 0, 0,0,0), nrow = 4, byrow = TRUE)
print(paste("la matrice A est nilpotente d'order ",nilpotenteOrdreT(A), sep=' '))
print(paste("la matrice B est nilpotente d'order ",nilpotenteOrdreT(B), sep=' '))
termN1=function(k,j){
resultat=(factorial(k)/(factorial(j)*factorial(k-j)) )
return(resultat)
}
termN1(20,8)
CN= function(k, n){
res = factorial(n)/(factorial(k)*factorial(n-k))
return(res)
}
CN(20,8)
CN(8,20)
k=0:6
CN(k,6)
sum(CN(k,6))
k=0:10 sum(termN1(10,k)*0.4^k*0.6^(10-k)
k=0:10 ;sum(termN1(10,k)*0.4^k*0.6^(10-k)
)
k=0:10 ;sum(termN1(10,k)*0.4^k*0.6^(10-k))
(-.5)^(0:20) + 2
(-.5)^(1:20) + 2
# 5.1
## i
x=c(1,4,4,4,8,4,1,1,1,8)
y=c(-16,16,16,16,9,16,-16,-16,-16,9)
x
y
## (ii) Calculer le coeicient de corrélation Rxy
cor(x,y)
# 0.7132086 les deux varaibles sont fortement corrélées
## (iii) Faire le tableau de contingence
continegence = table(x,y)
continegence
## (iv) calculer la statistique de Chi-2
qchisq(0.95, df=4)
## (iv) calculer la statistique de Chi-2
chisq.test(continegence)
ls()
dir()
setwd("~/Documents/Vacation/StatDescrptive/tp5_StatDes_Julien")
dir()
data=read.csv("GPA.csv",header =TRUE,sep=";",dec=",")
x=data$high_GPA
y=data$univ_GPA
## (iii) Tracer le nuage de points et commenter
plot(x,y)
## (v) Vérifier le résultat
cor(x,y)
correlation(x,y)
correlation = function(u,v){
cov=cov(x,y)
denom = sqrt(var(u) * var(v))
corr = cov / denom
return(corr)
}
correlation(x,y)
a <- cov(x,y)/var(x)
b <- mean(y) - a*mean(x)
## (vii) tracer la droite de régression
abline(b,a, col="red")
## (viii) Calculer les valeurs ajustées et les erreurs
yajuste <- a*x + b
erreurs <- y - yajuste
correlation = function(u,v){
cov=cov(u,v)
denom = sqrt(var(u) * var(v))
corr = cov / denom
return(corr)
}
data=read.csv("GPA.csv",header =TRUE,sep=";",dec=",")
x=data$high_GPA
y=data$univ_GPA
## (v) Vérifier le résultat
cor(x,y)
correlation(x,y)
correlation = function(u,v){
cov=cov(x,y)
denom = sqrt(var(u) * var(v))
corr = cov / denom
return(corr)
}
u = rnorm(100)
v= rnorm(100)
correlation(u,v)
model = lm(y~x)
b=model$coefficients[1]
a=model$coefficients[2]
yajustes=model$fitted.values
erreurs=model$residuals
data=read.csv("GPA.csv",header =TRUE,sep=";",dec=",")
x=data$high_GPA
y=data$univ_GPA
model = lm(y~x)
b=model$coefficients[1]
a=model$coefficients[2]
yajustes=model$fitted.values
erreurs=model$residuals
model
model$residuals
## (x) Représenter les résidus en fonction des valeurs ajustées
plot(yajuste, erreurs)
## (x) Représenter les résidus en fonction des valeurs ajustées
plot(yajustes, erreurs)
## (xi) Voit-on une structure particulière des résidus
#
## (xii)
notUniv =  a*2.5 + b
notUniv
